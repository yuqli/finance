ggplot() +
geom_plot(data=d, mapping=aes(x=system, y=runtime), size=1)
d=data.frame(system=rep(c('before','after'), 2000), runtime=rexp(4000, 1))
ggplot() +
geom_point(data=d, mapping=aes(x=system, y=runtime), size=1)
d=data.frame(system=rep(c('before','after'), 2000), runtime=rexp(4000, 1))
ggplot() +
geom_jitter(data=d, mapping=aes(x=system, y=runtime), size=1)
ggplot(frequency, aes(Ivanka, Donald)) + geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25, color = "lightblue") + geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) + scale_x_log10(labels = percent_format()) + scale_y_log10(labels = percent_format()) + geom_abline(color = "red") + ggtitle("Word Frequency Difference Between Ivanka and Donald Trump")
##### Clean allTweets
# Keep only the completely recorded tweets
allTweets$incomplete <- grepl("\\(cont\\)", allTweets$text)
cleanedAllTweets <- allTweets[!allTweets$incomplete,]
cleanedAllTweets$incomplete <- NULL
# Keep only the tweets that are not retweets
#
# > table(cleanedAllTweets$is_retweet)
# False  True
# 31437  9935
cleanedAllTweets <- cleanedAllTweets[!as.logical(cleanedAllTweets$is_retweet),]
cleanedAllTweets$is_retweet <- NULL
# Extract URLs from tweets
rm_twitter_n_url <- rm_(pattern=pastex("@rm_twitter_url", "@rm_url"))
cleanedAllTweets$urls <- unlist(sapply(rm_twitter_n_url(cleanedAllTweets$text, extract=TRUE), function(x) return(paste(x, collapse = "\t"))))
cleanedAllTweets$text <- rm_twitter_n_url(cleanedAllTweets$text)
# Extract hashtags from tweets
cleanedAllTweets$hashtags <- unlist(sapply(rm_hash(cleanedAllTweets$text, extract=TRUE), function(x) return(paste(x, collapse = "\t"))))
cleanedAllTweets$text <- rm_hash(cleanedAllTweets$text)
# Remove quotation marks and collapse multiple whitespaces
cleanedAllTweets$text <- gsub("'", '', cleanedAllTweets$text)
cleanedAllTweets$text <- gsub("\"", '', cleanedAllTweets$text)
cleanedAllTweets$text <- gsub("\\s+", " ", str_trim(cleanedAllTweets$text))
### Tidy tweets using tidytext
tidy_tweets <- cleanedAllTweets %>% mutate(text = str_replace_all(text, "https://t.co/[A-Za-z\\d]+|http://[A-Za-z\\d]+|&amp;|&lt;|&gt;|RT|https", "")) %>% unnest_tokens(word, text, token = "regex", pattern = "([^A-Za-z_\\d#@']|'(?![A-Za-z_\\d#@]))") %>% filter(!word %in% stop_words$word, str_detect(word, "[a-z]"))
##### Get word frequency using tidyr
##### YQ- frequency here is n[i]/sum
frequency <- tidy_tweets %>% group_by(person) %>% count(word, sort = TRUE) %>% left_join(tidy_tweets %>% group_by(person) %>% summarise(total = n())) %>% mutate(freq = n/total)
# > frequency
# Source: local data frame [29,589 x 5]
# Groups: person [2]
#
#    person             word     n  total        freq
#     <chr>            <chr> <int>  <int>       <dbl>
# 1  Donald            trump  1991 142627 0.013959489
# 2  Donald            obama  1128 142627 0.007908741
# 3  Donald           people   978 142627 0.006857047
# 4  Ivanka             tips   812  64851 0.012521010
# 5  Donald             time   715 142627 0.005013076
# 6  Donald @realdonaldtrump   706 142627 0.004949974
# 7  Donald           donald   673 142627 0.004718602
# 8  Donald          america   665 142627 0.004662511
# 9  Ivanka     @ivankatrump   569  64851 0.008773959
# 10 Donald        president   559 142627 0.003919314
# # ... with 29,579 more rows
frequency <- frequency %>% select(person, word, freq) %>% spread(person, freq) %>% arrange(Donald, Ivanka)
frequency
# # A tibble: 24,444 Ã— 3
#               word       Donald       Ivanka
#              <chr>        <dbl>        <dbl>
# 1          @10best 7.011295e-06 1.541996e-05
# 2   @britneyspears 7.011295e-06 1.541996e-05
# 3   @callmemrwayne 7.011295e-06 1.541996e-05
# 4     @charlierose 7.011295e-06 1.541996e-05
# 5    @claretourism 7.011295e-06 1.541996e-05
# 6  @coachdanmullen 7.011295e-06 1.541996e-05
# 7        @dabg3241 7.011295e-06 1.541996e-05
# 8  @dailymailceleb 7.011295e-06 1.541996e-05
# 9           @doral 7.011295e-06 1.541996e-05
# 10  @drudge_report 7.011295e-06 1.541996e-05
# # ... with 24,434 more rows
ggplot(frequency, aes(Ivanka, Donald)) + geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25, color = "lightblue") + geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) + scale_x_log10(labels = percent_format()) + scale_y_log10(labels = percent_format()) + geom_abline(color = "red") + ggtitle("Word Frequency Difference Between Ivanka and Donald Trump")
tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word)
tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word) %>% ungroup() %>% group_by(person, time_floor)
tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word) %>% ungroup() %>% group_by(person, time_floor) %>% mutate(time_total = sum(n)) %>% group_by(word)
tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word) %>% ungroup() %>% group_by(person, time_floor) %>% mutate(time_total = sum(n)) %>% group_by(word) %>% mutate(word_total = sum(n))
tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word) %>% ungroup() %>% group_by(person, time_floor) %>% mutate(time_total = sum(n)) %>% group_by(word) %>% mutate(word_total = sum(n)) %>% ungroup() %>% rename(count = n) %>% filter(word_total > 30)
?count
word_by_rts
tidy_tweets
count(baseball[1:100,], vars = "id")
word_by_rts
## Word cloud - Author: Yuqiong Li & Yiming Li
## This part takes a long time to run so the wordcloud is separately attached.
# install.packages("tm")
# install.packages("wordcloud")
# install.packages("RColorBrewer")
# install.packages("slam")
library(tm)
library(wordcloud)
library(RColorBrewer)
makeCloud <- function(docs, graphfile = "wordcloud.pdf") {
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("the", "get"))
# docs <- tm_map(docs, content_transformer(gsub), pattern = "thanks", replacement = "thank", fixed=TRUE)
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# head(d, 10)
pdf(file = graphfile)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
dev.off()
return(list(docs = docs, dtm = dtm, d = d))
}
load("tweets2.RData")
words_by_time <- tidy_tweets %>% filter(!str_detect(word, "^@")) %>% mutate(time_floor = floor_date(timestamp, unit = "1 month")) %>% count(time_floor, person, word) %>% ungroup() %>% group_by(person, time_floor) %>% mutate(time_total = sum(n)) %>% group_by(word) %>% mutate(word_total = sum(n)) %>% ungroup() %>% rename(count = n) %>% filter(word_total > 30)
nested_data <- words_by_time %>% nest(-word, -person)
nested_models <- nested_data %>% mutate(models = map(data, ~ glm(cbind(count, time_total) ~ time_floor, ., family = "binomial")))
slopes <- nested_models %>% unnest(map(models, tidy)) %>% filter(term == "time_floor") %>% mutate(adjusted.p.value = p.adjust(p.value))
top_slopes_d <- slopes %>% filter(adjusted.p.value < 0.00000000000000000001)
words_by_time %>% inner_join(top_slopes, by = c("word", "person")) %>% filter(person == "Donald") %>% ggplot(aes(time_floor, count/time_total, color = word)) + geom_line(size = 1) + labs(x = NULL, y = "Word frequency") + ggtitle("Top 8 Trending Words in Donald Trump's Tweets")
top_slopes_i <- slopes %>% filter(adjusted.p.value < 0.00000000000000000001)
words_by_time %>% inner_join(top_slopes, by = c("word", "person")) %>% filter(person == "Ivanka") %>% ggplot(aes(time_floor, count/time_total, color = word)) + geom_line(size = 1) + labs(x = NULL, y = "Word frequency") + ggtitle("Top 3 Trending Words in Ivanka Trump's Tweets")
tb1 <- cbind((10, 0), (50, 60))
?cbind
(10, 0)
tb1 <- cbind(c(10, 0), c(50, 60))
tb1
chisq.test(tb1)
str(tb1)
tb1[1]
tb1[[1]]
tb1 <- cbind(c(1, 0), c(59, 60))
chisq.test(tb1)
tb1 <- cbind(c(9, 2), c(51, 58))
chisq.test(tb1)
tb1 <- cbind(c(12, 1), c(48, 59))
chisq.test(tb1)
tb1 <- cbind(c(5, 0), c(55, 60))
chisq.test(tb1)
tb1 <- cbind(c(8, 1), c(52, 59))
chisq.test(tb1)
tb1 <- cbind(c(11, 3), c(49, 57))
chisq.test(tb1)
e
rm(list = ls(), all = TRUE)
rm(list = ls(), all = TRUE)
rm(list = ls())
devtools::install_github('edwindj/ffbase2')
install.packages("ffbase")
install.packages("biglm")
install.packages("pROC")
devtools::install_github('edwindj/ffbase2')
install.packages(c('devtools','curl'))
((devtools::install_github('edwindj/ffbase2')))
library("ffbase")
library("devtool")
library("biglm")
library("pROC")
library(ff)
m <- -Inf
m
for (i in chunk(x)){}
for (i in chunk(x)){}
x <- ff(0, length=1e+08)
for (i in chunk(x)){
m <- max(x[i], m, na.rm=TRUE)
}
?as.data.frame
plot(cars)
getwd()
setwd('/Users/yuqiongli/desktop/python/finance/sentiment0808')
returns <- read.csv('./returns', header = TRUE, sep = ",")
returns <- read.csv('~/returns', header = TRUE, sep = ",")
setwd('/Users/yuqiongli/desktop/python/finance/sentiment0808')
returns <- read.csv('~/returns', header = TRUE, sep = ",")
returns <- read.csv('../returns', header = TRUE, sep = ",")
returns <- read.csv('returns.csv', header = TRUE, sep = ",")
returns
summary(returns)
returns$Securities <- as.factor(returns$Securities)
summary(returns)
returns$Date <- as.Date(returns$Date, format = '%d %m %y')
type(returns$Date)
typeof(returns$Date)
typeof(as.Date(returns$Date, format = '%d %m %y'))
class(as.Date(returns$Date, format = '%d %m %y'))
plot(returns$Date, returns$SD_05)
plot(returns$SD_05)
ggplot(returns$SD_05, aes(returns$Date))
library(ggplot2)
ggplot(returns$SD_05, aes(returns$Date))
ggplot(data = returns, aes(x = Date, y = SD_05))
MMM <- returns[returns$Securities='MMM']
MMM <- returns[returns$Securities=='MMM']
MMM <- returns[, returns$Securities=='MMM']
MMM <- returns[returns$Securities=='MMM', ]
MMM
returns
setwd('/Users/yuqiongli/desktop/python/finance/sentiment0808')
returns <- read.csv('returns.csv', header = TRUE, sep = ",") # note the address
returns$Securities <- as.factor(returns$Securities)
returns
as.Date(returns$Date, format = '%d %m %y')
returns$Date <- as.Date(returns$Date, format = '%d%m%y')
returns$Date
returns$Date <- as.Date(returns$Date, format = '%d/%m/%y')
returns <- read.csv('returns.csv', header = TRUE, sep = ",") # note the address
returns
as.Date(returns$Date, format = '%d/%m/%y')
returns <- read.csv('returns.csv', header = TRUE, sep = ",") # note the address
returns$Securities <- as.factor(returns$Securities)
type(returns$Date)
typeof(returns$Date)
returns$Date <- as.Date(returns$Date, format = '%d/%m/%Y')
returns
MMM <- returns[returns$Securities=='MMM', ]
ggplot(data = returns, aes(x = Date, y = SD_05))
ggplot(data = MMM, aes(x = Date, y = SD_05)) +
geom_point()
MMM <- returns[returns$Securities=='MMM', ]
ggplot(data = MMM, aes(x = Date, y = SD_05)) +
geom_point() + geom_line()
MMM
MO <- returns[returns$Securities=='MO', ]
ggplot(data = MO, aes(x = Date, y = SD_05)) +
geom_point() + geom_line()
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = SD_05)) +
geom_point() + geom_line()
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = SD_1)) +
geom_point() + geom_line()
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = SD_1)) +
geom_line()
MMM <- returns[returns$Securities=='MMM', ]
ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line()
MO <- returns[returns$Securities=='MO', ]
ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line()
MMM
ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
returns
library(ggplot2)
library(tidyr)
returns_long <- gather(returns, strategy, daily_return, Buy_Hold:SD_2, factor_key=True)
returns_long <- gather(returns, strategy, daily_return, Buy_Hold:SD_2, factor_key=TRUE)
returns_long
MMM_long <- returns_long[returns_long$Securities=='MMM', ]
MO_long <- returns_long[returns_long$Securities=='MO', ]
KO_long <- returns_long[returns_long$Securities=='KO', ]
MMM_long
fit <- aov(returns_long ~ strategy, data = MMM_long)
fit <- aov(daily_return ~ strategy, data = MMM_long)
summary(fit)
MMM_long <- returns_long[returns_long$Securities=='MMM', ]
fit <- aov(daily_return ~ strategy, data = MMM_long)
summary(fit)
MO_long <- returns_long[returns_long$Securities=='MO', ]
fit <- aov(daily_return ~ strategy, data = MMM_long)
summary(fit)
KO_long <- returns_long[returns_long$Securities=='KO', ]
fit <- aov(daily_return ~ strategy, data = MMM_long)
summary(fit)
MO_long <- returns_long[returns_long$Securities=='MO', ]
fit <- aov(daily_return ~ strategy, data = MO_long)
summary(fit)
KO_long <- returns_long[returns_long$Securities=='KO', ]
fit <- aov(daily_return ~ strategy, data = KO_long)
summary(fit)
MMM <- returns[returns$Securities=='MMM', ]
ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
# First does an ANOVA test
MO <- returns[returns$Securities=='MO', ]
ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line()
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line()
MO <- returns[returns$Securities=='MO', ]
# ggplot(data = MO, aes(x = Date, y = Buy_Hold)) + geom_line()
# ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line()
# ggplot(data = MO, aes(x = Date, y = SD_1)) + geom_line()
ggplot(data = MO, aes(x = Date, y = SD_2)) + geom_line()
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = Buy_Hold)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_05)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_2)) + geom_line()
plot(density(MMM$Buy_Hold))
plot(density(MMM$SD_05))
plot(density(MMM$SD_1))
plot(density(MMM$SD_2))
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = Buy_Hold)) + geom_line()
ggplot(data = KO, aes(x = Date, y = SD_05)) + geom_line()
ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line()
ggplot(data = KO, aes(x = Date, y = SD_2)) + geom_line()
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line()
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line()
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line()
multiplot(p1, p2m p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line()
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line()
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line()
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line()
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line()
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line()
multiplot(p1, p2, p3, p4, cols=2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
# Source URL: http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line()
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line()
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line()
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line()
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line() + ggtitle("Daily return sequence Buy and Hold")
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line() + ggtitle("Daily return sequence Put Call Ratio SD = 0.5")
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line() + ggtitle("Daily return sequence Put Call Ratio SD = 1")
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line() + ggtitle("Daily return sequence Put Call Ratio SD = 2")
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line() + ggtitle("Return: Buy and Hold")
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 0.5")
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 1")
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 2")
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line() + ggtitle("Return: Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 0.5")
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 1")
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line() + ggtitle("Return: Put Call Ratio SD = 2")
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Return: Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
MO <- returns[returns$Securities=='MO', ]
p1 <- ggplot(data = MO, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Return: Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = MO, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = MO, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
KO <- returns[returns$Securities=='KO', ]
p1 <- ggplot(data = KO, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Return: Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = KO, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = KO, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Return: Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
MMM <- returns[returns$Securities=='MMM', ]
p1 <- ggplot(data = MMM, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MMM, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = MMM, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = MMM, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
MO <- returns[returns$Securities=='MO', ]
p1 <- ggplot(data = MO, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = MO, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = MO, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
KO <- returns[returns$Securities=='KO', ]
p1 <- ggplot(data = KO, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = KO, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = KO, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
MO <- returns[returns$Securities=='MO', ]
p1 <- ggplot(data = MO, aes(x = Date, y = Buy_Hold)) + geom_line() +
ggtitle("Buy and Hold") + labs(y="Simple Daily Return")
p2 <- ggplot(data = MO, aes(x = Date, y = SD_05)) + geom_line() +
ggtitle("Put Call Ratio SD = 0.5") +labs(y="Simple Daily Return")
p3 <- ggplot(data = MO, aes(x = Date, y = SD_1)) + geom_line() +
ggtitle("Put Call Ratio SD = 1") + labs(y="Simple Daily Return")
p4 <- ggplot(data = MO, aes(x = Date, y = SD_2)) + geom_line() +
ggtitle("Put Call Ratio SD = 2") + labs(y="Simple Daily Return")
multiplot(p1, p2, p3, p4, cols=2)
plot(density(MMM$Buy_Hold))
plot(density(MMM$SD_05))
plot(density(MMM$SD_1))
plot(density(MMM$SD_2))
p1 <- plot(density(MMM$Buy_Hold))
p2 <- plot(density(MMM$SD_05))
p3 <- plot(density(MMM$SD_1))
p4 <- plot(density(MMM$SD_2))
multiplot(p1, p2, p3, p4, cols=2)
p1 <- plot(density(MMM$Buy_Hold))
p2 <- plot(density(MMM$SD_05))
p3 <- plot(density(MMM$SD_1))
p4 <- plot(density(MMM$SD_2))
multiplot(p1, p2, p3, p4, cols=2)
plot(density(MMM$Buy_Hold))
plot(density(MMM$SD_05))
plot(density(MMM$SD_1))
plot(density(MMM$SD_2))
shapiro.test(MMM$Buy_Hold)
shapiro.test(MMM$SD_05)
shapiro.test(MMM$SD_1)
shapiro.test(MMM$SD_2)
## Plot using a qqplot
qqnorm(MMM$Buy_Hold);qqline(MMM$Buy_Hold, col = 2)
qqnorm(MMM$SD_05);qqline(MMM$SD_05, col = 2)
qqnorm(MMM$SD_1);qqline(MMM$SD_1, col = 2)
qqnorm(MMM$SD_2);qqline(MMM$SD_2, col = 2)
MO_long <- returns_long[returns_long$Securities=='MO', ]
fit <- aov(daily_return ~ strategy, data = MO_long)
summary(fit)
KO <- returns[returns$Securities=='KO', ]
ggplot(data = KO, aes(x = Date, y = Buy_Hold)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_05)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_1)) + geom_line()
# ggplot(data = KO, aes(x = Date, y = SD_2)) + geom_line()
plot(density(MO$Buy_Hold))
plot(density(MO$SD_05))
plot(density(MO$SD_1))
plot(density(MO$SD_2))
shapiro.test(MO$Buy_Hold)
shapiro.test(MO$SD_05)
shapiro.test(MO$SD_1)
shapiro.test(MO$SD_2)
## Plot using a qqplot
qqnorm(MO$Buy_Hold);qqline(MO$Buy_Hold, col = 2)
qqnorm(MO$SD_05);qqline(MO$SD_05, col = 2)
qqnorm(MO$SD_1);qqline(MO$SD_1, col = 2)
qqnorm(MO$SD_2);qqline(MO$SD_2, col = 2)
plot(density(KO$Buy_Hold))
plot(density(KO$SD_05))
plot(density(KO$SD_1))
plot(density(KO$SD_2))
shapiro.test(KO$Buy_Hold)
shapiro.test(KO$SD_05)
shapiro.test(KO$SD_1)
shapiro.test(KO$SD_2)
## Plot using a qqplot
qqnorm(KO$Buy_Hold);qqline(KO$Buy_Hold, col = 2)
qqnorm(KO$SD_05);qqline(KO$SD_05, col = 2)
qqnorm(KO$SD_1);qqline(KO$SD_1, col = 2)
qqnorm(KO$SD_2);qqline(KO$SD_2, col = 2)
